# Scroll back:
set -g history-limit 4096

# VISUAL:
# Count from 1 instead of 0:
set -g base-index 1
set -g pane-base-index 1

# Place status bar on top and only show it when there are multiple windows:
set-option -g status-position top
if -F '#{==:#{session_windows},1}' 'set -g status off' 'set -g status on'
set-hook -g window-linked "if -F '#{==:#{session_windows},1}' 'set -g status off' 'set -g status on'"
set-hook -g window-unlinked "if -F '#{==:#{session_windows},1}' 'set -g status off' 'set -g status on'"
set -g status-left ""
set -g status-right ""
#set -g status-bg '#262626'
#set -g status-fg '#ffd7af'

# Show program name of window in status bar unless it's bash,
# in which case show directory name:
set -g status-interval 1
set -g window-status-format '#I:#{?#{==:#{pane_current_command},bash},#{b:pane_current_path},#{pane_current_command}}#F'
set -g window-status-current-format '#I:#{?#{==:#{pane_current_command},bash},#{b:pane_current_path},#{pane_current_command}}#F'

# Allow the current window to resize to the proper size even
# if another client is attached to the session, but not
# viewing the current window:
setw -g aggressive-resize on


# TERMINAL:
# Allow for utf8 characters:
#set -g status-utf8 on
#set -g utf8 on

# Do not start a login shell:
set -g default-command "${SHELL}"

# Allow for color:
set -g default-terminal "screen-256color"

# Set xterm title:
# (Not sure why 'set -g allow-rename on' is needed)
set-option -g set-titles on
set -g allow-rename on
set-option -g set-titles-string "#{b:pane_current_path}"
#set-option -g set-titles-string "#{pane_current_command}: #{b:pane_current_path}"
# The following should be in the .bashrc for this to work:
# [BEGIN CODE]
# case "$TERM" in
#   screen*)
#     export PROMPT_COMMAND='echo -ne "\033k${HOSTNAME%%.*}: ${PWD##*/}\033\\" '
#     ;;
# esac
# [END CODE]

# BINDS:
# List of top level keys not used by default: abeghjkuvy/
# (along with '<' and '>' and all uppercase letters other than DLM).

# Allow for up to 5 second delay between prefix-key
# keypress and subsequent keypress:
set -s escape-time 5

unbind C-b
set -g prefix C-a
bind C-a send-prefix

bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded!"

# Set new panes/windows to open in current directory
# and use more ergonomic keybindings:
bind h split-window -h -c "#{pane_current_path}"
bind y split-window -c "#{pane_current_path}"
bind u new-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind '"' split-window -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Use 'j' to go to next pane (more ergonomic than the default 'o'):
bind j select-pane -t :.+
bind J select-pane -t :.-

# make '<Prefix>+n' act the same as '<Prefix>' then 'n' on my keyboard:
bind -r Home next-window

# Get to copy-mode more easily:
bind v copy-mode
bind C-v paste-buffer

# Allow PageUp/PageDown to scroll via copy-mode:
# From: https://gist.github.com/zsimic/03d4ac3cedf40a88f1d5
bind -n PageUp if-shell -F "#{alternate_on}" "send-keys PageUp" "copy-mode -e; send-keys PageUp"
bind -n PageDown if-shell "test #{pane_in_mode} -gt 0 -o #{alternate_on} -gt 0" "send-keys PageDown"


# COPY-MODE BINDS:
# Allow resizing in copy mode with arrow keys:
bind -T copy-mode-vi Up resize-pane -U 5
bind -T copy-mode-vi Down resize-pane -D 5
bind -T copy-mode-vi Left resize-pane -L 5
bind -T copy-mode-vi Right resize-pane -R 5

bind -T copy-mode-vi Home send-keys -X start-of-line
bind -T copy-mode-vi End send-keys -X end-of-line
bind -T copy-mode-vi y send -X copy-selection
bind -T copy-mode-vi C-c send -X copy-selection\; run "tmux save-buffer - | xclip -i -selection clipboard > /dev/null"


# MOUSE-BINDS:
set -g mouse on

# Emulate scrolling by sending up and down keys if these commands are running in the pane
tmux_commands_with_legacy_scroll="nano less more man git"

bind-key -T root WheelUpPane \
	if-shell -Ft= '#{?mouse_any_flag,1,#{pane_in_mode}}' \
		'send -Mt=' \
		'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
			"send -t= Up Up Up" "copy-mode -et="'

bind-key -T root WheelDownPane \
	if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
		'send -Mt=' \
		'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
			"send -t= Down Down Down" "send -Mt="'

# Make middle and right click paste primary select and clipboard, respectively:
# From: https://github.com/alacritty/alacritty/issues/1453
tmux_shells="sh ash dash bash rbash ksh zsh csh tcsh fish"
bind-key -T root MouseDown2Pane \
	if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
		'send -Mt=' \
		'if-shell -t= "#{?alternate_on,false,true} || echo \"#{tmux_shells}\" | grep -q \"#{pane_current_command}\"" \
			"run-shell -b \"xclip -r -o | tmux load-buffer - && tmux paste-buffer\"" "send -Mt="'

bind-key -T root MouseDown3Pane \
	if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
		'send -Mt=' \
		'if-shell -t= "#{?alternate_on,false,true} || echo \"#{tmux_shells}\" | grep -q \"#{pane_current_command}\"" \
			"run-shell -b \"xclip -r -o -selection clipboard | tmux load-buffer - && tmux paste-buffer\"" "send -Mt="'


# MAKE MOUSE SELECTION BEHAVIOR MORE STANDARD:
# From: https://gist.github.com/rodricels/7951c3bd505d343b07309b76188af9b3
unbind -n -T copy-mode-vi MouseDragEnd1Pane
# Left click to clear selection:
bind -T copy-mode-vi MouseDown1Pane select-pane\; send -X clear-selection
# Highlighted selection is sent to primary select:
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-selection-no-clear\; run "tmux save-buffer - | xclip -i > /dev/null"
# Right-click to send highlighted selection to clipboard and then unselect the text:
bind -T copy-mode-vi MouseDown3Pane send -X copy-selection\; run "tmux save-buffer - | xclip -i -selection clipboard > /dev/null"
# Get out of copy mode by double clicking the right mouse:
bind -T copy-mode-vi DoubleClick3Pane send -X cancel
# Middle click exits copy mode and pastes primary selection:
bind -T copy-mode-vi MouseDown2Pane send -X cancel\; run-shell -b "xclip -r -o | tmux load-buffer - && tmux paste-buffer"

# From: https://stackoverflow.com/questions/31404140/can-i-use-double-click-to-select-and-copy-in-tmux/46638561
# Double LMB Select & Copy (Word)
bind-key -T copy-mode-vi DoubleClick1Pane \
    select-pane \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe-no-clear "xclip -i > /dev/null"

bind-key -T root DoubleClick1Pane \
	if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
		'send -Mt=' \
		'if-shell -t= "#{?alternate_on,false,true} || echo \"#{tmux_shells}\" | grep -q \"#{pane_current_command}\"" \
			"select-pane \; copy-mode -M \; send-keys -X select-word \; send-keys -X copy-pipe-no-clear \"xclip -i > /dev/null\"" "send -Mt="'

# Triple LMB Select & Copy (Line)
bind-key -T copy-mode-vi TripleClick1Pane \
    select-pane \; \
    send-keys -X select-line \; \
    send-keys -X copy-pipe-no-clear "xclip -i > /dev/null"

bind-key -T root TripleClick1Pane \
	if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
		'send -Mt=' \
		'if-shell -t= "#{?alternate_on,false,true} || echo \"#{tmux_shells}\" | grep -q \"#{pane_current_command}\"" \
			"select-pane \; copy-mode -M \; send-keys -X select-line \; send-keys -X copy-pipe-no-clear \"xclip -i > /dev/null\"" "send -Mt="'
