" Also see:
" $VIMRUNTIME/evim.vim
" $VIMRUNTIME/mswin.vim

" TODO:
" Make dragging mouse past left or right window border scroll left or right.
" Make middle clicking a tab close that tab.
" Make CTRL-A retain winview (low priority)

" NOTE ABOUT INSERTMODE:
" when <Esc> is used inside a mapping, it behaves like
" 'insertmode' was not set.  This was done to be able to use the same
" mappings with 'insertmode' set or not set.
" When executing commands with ':normal' 'insertmode' is not used.


" Disable syntax highlighting and autoindention
" (evim is only used for simple tasks):
syntax off
set noautoindent
au!
filetype plugin indent off
filetype off

set lines=24
set visualbell t_vb=

set shortmess+=I
set encoding=utf-8
set number
set noshowmode

set guioptions-=T
set mousefocus
set wildmenu

set nobackup
set noswapfile
set viminfofile=NONE

set nomodeline

" Preserve xattr's
set backupcopy=yes

set splitbelow
set splitright
set hidden

" Open help in a new tab, and disable insert mode:
augroup help_new_tab_and_disable_insert_mode
  autocmd!
  autocmd FileType help silent wincmd T
  autocmd InsertEnter *.txt if &buftype ==# 'help' | call feedkeys("\<C-o>", 'n') | endif
augroup END

" Make vertical motions like CTRL-F, CTRL-B, gg, etc preserve horizontal
" cursor position:
set nostartofline

set listchars=space:·,tab:——>,eol:¶,nbsp:⍽

colorscheme torte

" Change color of listchars:
highlight clear NonText
highlight link NonText MoreMsg
highlight clear SpecialKey
highlight link SpecialKey MoreMsg

" Change color of colorcolumn:
highlight ColorColumn guibg=#1b5233 guifg=fg

" For spellcheck, just use undercurl without coloring the text:
highlight SpellBad guifg=fg guisp=#ee0000
highlight SpellCap guifg=fg guisp=#00bb00
highlight SpellRare guifg=fg
highlight SpellLocal guifg=fg

" Prevent tildes from showing after EOF:
highlight EndOfBuffer guifg=bg

" Prevent long lines at the bottom of the screen from making an @-abyss:
set display+=lastline

"highlight ColorColumn ctermbg=0 guibg=darkgrey

set sidescroll=1

" Do not use mouse context menus
set mousemodel=extend

" Print without syntax highlighting:
set printoptions+=syntax:n

" Let Zathura (with ps support) handle printing:
let &printexpr="system('< ' . v:fname_in . ' zathura - &') . delete(v:fname_in) + v:shell_error"


" Use CTRL-g like CTRL-o:
inoremap <C-g> <C-o>

" Tab support:
inoremap <silent> <C-t> <cmd>tabe<cr>
inoremap <C-w> <cmd>confirm bd<cr>
inoremap <C-Tab> <C-o>gt
inoremap <C-S-Tab> <C-o>gT
nnoremap <silent> <C-t> <cmd>tabe<cr>
nnoremap <C-w> <cmd>confirm bd<cr>
nnoremap <C-Tab> gt
nnoremap <C-S-Tab> gT
vnoremap <silent> <C-t> <cmd>tabe<cr>
vnoremap <C-w> <cmd>confirm bd<cr>
vnoremap <C-Tab> gt
vnoremap <C-S-Tab> gT

" Open new evim window:
inoremap <silent> <C-n> <cmd>silent exec '! gtk-launch evim.desktop &'<cr>
nnoremap <silent> <C-n> <cmd>silent exec '! gtk-launch evim.desktop &'<cr>
vnoremap <silent> <C-n> <cmd>silent exec '! gtk-launch evim.desktop &'<cr>

" Print:
inoremap <silent> <C-p> <cmd>hardcopy<cr>
nnoremap <silent> <C-p> <cmd>hardcopy<cr>
vnoremap <silent> <C-p> <cmd>hardcopy<cr>

" Open file:
inoremap <silent> <C-o> <cmd>exec 'browse confirm ' . (@% ==# '' && !&modified ? 'e' : 'tabe')<cr>
nnoremap <silent> <C-o> <cmd>exec 'browse confirm ' . (@% ==# '' && !&modified ? 'e' : 'tabe')<cr>
vnoremap <silent> <C-o> <cmd>exec 'browse confirm ' . (@% ==# '' && !&modified ? 'e' : 'tabe')<cr>

" Save:
" (the `<C-g>u` just makes the cursor blink in the position it originally was
" [without this, the cursor will blink on the vim command line, even though
" in actuality the cursor is still at it's original position in the buffer])
inoremap <expr> <C-S> "<cmd>" . (@% ==# '' ? 'browse confirm saveas' : 'update') . "<cr><C-g>u"
nnoremap <expr> <C-S> "<cmd>" . (@% ==# '' ? 'browse confirm saveas' : 'update') . "<cr>"
vnoremap <expr> <C-S> "<cmd>" . (@% ==# '' ? 'browse confirm saveas' : 'update') . "<cr>"

" Save as:
inoremap <C-S-s> <cmd>browse confirm saveas<cr><C-g>u
nnoremap <C-S-s> <cmd>browse confirm saveas<cr>
vnoremap <C-S-s> <cmd>browse confirm saveas<cr>

" Select all (without the newline of the last line):
inoremap <C-a> <C-o>vgg0oGg_<C-g>
nnoremap <C-a> vgg0oGg_<C-g>
vnoremap <C-a> gg0oGg_

" Prevent CTRL+x from emptying the paste-buffer when there is no selection:
inoremap <C-x> <nop>

" Have CTRL+z work while there is a selection:
vnoremap <C-z> :<C-u>norm! u<cr>

" Insert timestamp:
inoremap <F5> <C-r>=strftime('%Y-%m-%d %H:%M')<cr>

" Make <backspace>/<delete> trigger a new undo block:
inoremap <backspace> <C-g>u<backspace>
inoremap <delete> <C-g>u<delete>

" Delete a word at a time:
inoremap <C-backspace> <C-g>u<C-w>
inoremap <C-delete> <C-o>dw

" Toggle options and access command mode:
inoremap <F1> <C-o>:
inoremap <silent> <F2> <cmd>set number!<cr>
inoremap <silent> <F3> <cmd>call <SID>ToggleWrapAndLinebreak()<cr>
inoremap <silent> <F4> <cmd>set list! list?<cr>
inoremap <silent> <F7> <cmd>let &colorcolumn = (&colorcolumn ==# '' ? '80,100,120' : '')<cr>
inoremap <silent> <F8> <cmd>set spell! spell?<cr>

function! s:ToggleWrapAndLinebreak() abort
  if !(&wrap)
    set guioptions-=b
    set nolinebreak
    set wrap wrap?
  elseif !(&linebreak)
    set guioptions-=b
    set linebreak linebreak?
  else
    set nowrap
    set guioptions+=b
    echo '  nowrap'
  endif
endfunction

" Do not accidentally go to help:
nnoremap <F1> <nop>
vnoremap <F1> <nop>

" Remove highlighting from find/replace matches:
inoremap <silent> <esc> <cmd>nohlsearch<cr><esc>

" Make middle mouse count as a new action for undo purposes:
inoremap <MiddleMouse> <C-g>u<MiddleMouse>

" Make middle mouse behave the same as in Mousepad during selections:
snoremap <MiddleMouse> <C-g><MiddleMouse><esc>gv<C-g>
xnoremap <MiddleMouse> <MiddleMouse><esc>gv
" (For some reason when the x11-selection is empty, the * register
"   contains a filename, usually '$HOME/.vim')

" Use right click to copy/paste to/from the system clipboard (like Windows cmd):
inoremap <RightMouse> <C-g>u<C-o>"+<MiddleMouse>
snoremap <RightMouse> <C-g>"+y
xnoremap <RightMouse> "+y

" Use mouse back button to open a new line below the mouse cursor:
" (The '0d$' make sure the line is blank [it sometimes isn't depending on the ftplugin])
nnoremap <X1Mouse> <esc><C-o><LeftMouse><cmd>norm! o<cr><C-o>0<C-o>d$
inoremap <X1Mouse> <C-o><LeftMouse><cmd>norm! o<cr><C-o>0<C-o>d$

" Mouse undo/redo:
nnoremap <X2Mouse> u
nnoremap <C-X2Mouse> <C-r>
inoremap <X2Mouse> <C-o>u
inoremap <C-X2Mouse> <C-o><C-r>

" Mouse visual delete:
vnoremap <X2Mouse> d

" Mouse left/right scroll using up/down scroll:
inoremap <S-ScrollWheelDown> <ScrollWheelRight>
inoremap <S-ScrollWheelUp> <ScrollWheelLeft>
nnoremap <S-ScrollWheelDown> <ScrollWheelRight>
nnoremap <S-ScrollWheelUp> <ScrollWheelLeft>
vnoremap <S-ScrollWheelDown> <ScrollWheelRight>
vnoremap <S-ScrollWheelUp> <ScrollWheelLeft>

" Zoom in/out:
function! s:ZoomInOut(delta) abort
  let l:font = substitute(&guifont, '\d\+', '\=submatch(0) + ' . a:delta, 'g')

  " Set the new font size, but if it is now zero, make it 1:
  let &guifont = substitute(l:font, '\(^\|[^0-9]\)0', '\11', 'g')

  " Show current font size (for first font)
  redraw
  echo matchstr(&guifont, '\d\+')
endfunction

function! s:SetFontSize(size) abort
  let &guifont = substitute(&guifont, '\d\+', a:size, 'g')
  " Show current font size (for first font):
  redraw
  echo matchstr(&guifont, '\d\+')
endfunction

" <C-_> is really <C-->:
inoremap <C-_> <cmd>call <SID>ZoomInOut(-1)<cr>
inoremap <C-=> <cmd>call <SID>ZoomInOut(1)<cr>
inoremap <C-0> <cmd>call <SID>SetFontSize(11)<cr>
inoremap <C-ScrollWheelDown> <cmd>call <SID>ZoomInOut(-1)<cr>
inoremap <C-ScrollWheelUp> <cmd>call <SID>ZoomInOut(1)<cr>

nnoremap <C-_> <cmd>call <SID>ZoomInOut(-1)<cr>
nnoremap <C-=> <cmd>call <SID>ZoomInOut(1)<cr>
nnoremap <C-0> <cmd>call <SID>SetFontSize(11)<cr>
nnoremap <C-ScrollWheelDown> <cmd>call <SID>ZoomInOut(-1)<cr>
nnoremap <C-ScrollWheelUp> <cmd>call <SID>ZoomInOut(1)<cr>

vnoremap <C-_> <cmd>call <SID>ZoomInOut(-1)<cr>
vnoremap <C-=> <cmd>call <SID>ZoomInOut(1)<cr>
vnoremap <C-0> <cmd>call <SID>SetFontSize(11)<cr>
vnoremap <C-ScrollWheelDown> <cmd>call <SID>ZoomInOut(-1)<cr>
vnoremap <C-ScrollWheelUp> <cmd>call <SID>ZoomInOut(1)<cr>

" Create an undo checkpoint for every &updatetime milliseconds of idle time:
augroup create_undo_checkpoint_when_idling_in_insert_mode
  autocmd!
  autocmd CursorHoldI * call feedkeys("\<c-g>u", 'n')
augroup END

" Create undo checkpoints when writing prose:
inoremap <buffer> . .<c-g>u
inoremap <buffer> , ,<c-g>u
inoremap <buffer> ; ;<c-g>u
inoremap <buffer> : :<c-g>u
inoremap <buffer> ! !<c-g>u
inoremap <buffer> ? ?<c-g>u
inoremap <buffer> <cr> <c-g>u<cr>

" Prevent scrolling past EOF:
function! s:PageOrScrollDown(count, type) abort
  let l:save_pos = getpos('.')
  exec 'norm! L'

  " Check if already on last page:
  if line('.') ==# line('$')
    call setpos('.', l:save_pos)
    return
  endif

  " Page down or scroll down:
  call setpos('.', l:save_pos)
  if a:type ==# 'page'
    exec 'norm! ' . a:count . "\<C-f>"
  else
    exec 'norm! ' . a:count . "\<C-e>"
  endif
  let l:save_pos = getpos('.')
  exec 'norm! L'

  " If on last page, reposition view so that the bottom line
  " is the bottom of the winview:
  if line('.') ==# line('$')
    exec 'norm! zb'
  endif

  call setpos('.', l:save_pos)
endfunction
inoremap <silent> <PageDown> <cmd>call <SID>PageOrScrollDown(v:count1, 'page')<cr>
inoremap <silent> <ScrollWheelDown> <cmd>call <SID>PageOrScrollDown(3, 'scroll')<cr>
nnoremap <silent> <PageDown> <cmd>call <SID>PageOrScrollDown(v:count1, 'page')<cr>
nnoremap <silent> <ScrollWheelDown> <cmd>call <SID>PageOrScrollDown(3, 'scroll')<cr>
" (TODO: Make this work in select mode)
