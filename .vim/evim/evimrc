" Also see:
" $VIMRUNTIME/evim.vim
" $VIMRUNTIME/mswin.vim

" TODO:
" Make dragging mouse past left or right window border scroll left or right.
" Make middle clicking a tab close that tab.
" Make CTRL-A retain winview (low priority)

" NOTE ABOUT INSERTMODE:
" when <Esc> is used inside a mapping, it behaves like
" 'insertmode' was not set.  This was done to be able to use the same
" mappings with 'insertmode' set or not set.
" When executing commands with ':normal' 'insertmode' is not used.


" Disable syntax highlighting and autoindention
" (evim is only used for simple tasks):
syntax off
set noautoindent
au!
filetype plugin indent off
filetype off

set lines=24
set visualbell t_vb=

set shortmess+=I
set encoding=utf-8
set number
set noshowmode

set guioptions-=T
"set colorcolumn=80
set mousefocus

set nobackup
set noswapfile
set viminfofile=NONE

set nomodeline

" Preserve xattr's
set backupcopy=yes

set splitbelow
set splitright
set hidden

" Make vertical motions like CTRL-F, CTRL-B, gg, etc preserve horizontal
" cursor position:
set nostartofline

set listchars=space:·,tab:——>,eol:¶,nbsp:⍽

colorscheme torte

" Prevent tildes from showing after EOF:
highlight EndOfBuffer guifg=bg

" Prevent long lines at the bottom of the screen from making an @-abyss:
set display+=lastline

"highlight ColorColumn ctermbg=0 guibg=darkgrey

set sidescroll=1

" Do not use mouse context menus
set mousemodel=extend

" Print without syntax highlighting:
set printoptions+=syntax:n

" Let Zathura (with ps support) handle printing:
let &printexpr="system('< ' . v:fname_in . ' zathura - &') . delete(v:fname_in) + v:shell_error"


" Use CTRL-g like CTRL-o:
inoremap <C-g> <C-o>

" Tab support:
inoremap <silent> <C-t> <C-o>:<C-u>tabe<cr>
inoremap <C-w> <C-o>:<C-u>confirm bd<cr>
inoremap <C-Tab> <C-o>gt
inoremap <C-S-Tab> <C-o>gT

" Open new evim window:
inoremap <silent> <C-n> <C-o>:<C-u>silent exec '! gtk-launch evim.desktop &'<cr>

" Print:
inoremap <silent> <C-p> <C-o>:<C-u>hardcopy<cr>

" Open file:
inoremap <silent> <C-o> <C-o>:<C-u>browse confirm e<cr>

" Save:
inoremap <expr> <C-S> "\<C-o>:\<C-u>".(@% ==# "" ? 'browse confirm saveas' : 'update')."\<CR>"
nnoremap <expr> <C-S> ":\<C-u>".(@% ==# "" ? 'browse confirm saveas' : 'update')."\<CR>"
vnoremap <expr> <C-S> ":\<C-u>".(@% ==# "" ? 'browse confirm saveas' : 'update')."\<CR>"

" Save as:
inoremap <C-S-s> <C-o>:<C-u>browse confirm saveas<cr>
nnoremap <C-S-s> :<C-u>browse confirm saveas<cr>
vnoremap <C-S-s> :<C-u>browse confirm saveas<cr>

" Select all (without the newline of the last line):
inoremap <C-a> <C-o>vgg0oGg_
nnoremap <C-a> vgg0oGg_
vnoremap <C-a> gg0oGg_

" Prevent CTRL+x from emptying the paste-buffer when there is no selection:
inoremap <C-x> <nop>

" Insert timestamp:
inoremap <F5> <C-r>=strftime("%Y-%m-%d %H:%M")<cr>

" Make <backspace>/<delete> trigger a new undo block:
inoremap <backspace> <C-g>u<backspace>
inoremap <delete> <C-g>u<delete>

" Delete a word at a time:
inoremap <C-backspace> <C-g>u<C-w>
inoremap <C-delete> <C-o>dw

" Toggle options and access command mode:
inoremap <F1> <C-o>:
inoremap <silent> <F2> <C-o>:<C-u>set number!<cr>
inoremap <silent> <F3> <C-o>:<C-u>call <SID>ToggleWrapAndLinebreak()<cr>
inoremap <silent> <esc> <C-o>:<C-u>nohlsearch<cr>

function! s:ToggleWrapAndLinebreak()
  if !(&wrap)
    set wrap
    set guioptions-=b
  elseif !(&linebreak)
    set linebreak
    set guioptions-=b
  else
    set nowrap
    set nolinebreak
    set guioptions+=b
  endif
endfunction

" Make middle mouse count as a new action for undo purposes:
inoremap <MiddleMouse> <C-g>u<MiddleMouse>

" Make middle mouse behave the same as in Mousepad during selections:
snoremap <MiddleMouse> <C-g><MiddleMouse><esc>gv<C-g>
xnoremap <MiddleMouse> <MiddleMouse><esc>gv
" (For some reason when the x11-selection is empty, the * register
"   contains a filename, usually '$HOME/.vim')

" Use right click to copy/paste to/from the system clipboard (like Windows cmd):
inoremap <RightMouse> <C-g>u<C-o>"+<MiddleMouse>
snoremap <RightMouse> <C-g>"+y
xnoremap <RightMouse> "+y

" Use mouse back button to open a new line below the mouse cursor:
" (The '0d$' make sure the line is blank [it sometimes isn't depending on the ftplugin])
nnoremap <X1Mouse> <LeftMouse>o<esc>0d$
inoremap <X1Mouse> <C-o><LeftMouse><C-o>:exec "norm! o<\esc>"<cr><C-o>0<C-o>d$

" Mouse undo:
nnoremap <X2Mouse> u
inoremap <X2Mouse> <C-o>u

" Mouse visual delete:
vnoremap <X2Mouse> d

" Zoom in/out:
function! s:ZoomInOut(delta)
  let l:font = substitute(&guifont, '\d\+', '\=submatch(0) + ' . a:delta, 'g')

  " Set the new font size, but if it is now zero, make it 1:
  let &guifont = substitute(l:font, '\(^\|[^0-9]\)0', '\11', 'g')

  " Show current font size (for first font)
  redraw
  echo matchstr(&guifont, '\d\+')
endfunction

function! s:SetFontSize(size)
  let &guifont = substitute(&guifont, '\d\+', a:size, 'g')
  " Show current font size (for first font):
  redraw
  echo matchstr(&guifont, '\d\+')
endfunction

" <C-_> is really <C-->:
inoremap <C-_> <C-o>:<C-u>call <SID>ZoomInOut(-1)<cr>
inoremap <C-=> <C-o>:<C-u>call <SID>ZoomInOut(1)<cr>
inoremap <C-0> <C-o>:<C-u>call <SID>SetFontSize(11)<cr>
inoremap <C-ScrollWheelDown> <C-o>:<C-u>call <SID>ZoomInOut(-1)<cr>
inoremap <C-ScrollWheelUp> <C-o>:<C-u>call <SID>ZoomInOut(1)<cr>

snoremap <C-_> <C-g>:<C-u>call <SID>ZoomInOut(-1) <bar> norm! gv<cr><C-g>
snoremap <C-=> <C-g>:<C-u>call <SID>ZoomInOut(1) <bar> norm! gv<cr><C-g>
xnoremap <C-_> :<C-u>call <SID>ZoomInOut(-1) <bar> norm! gv<cr>
xnoremap <C-=> :<C-u>call <SID>ZoomInOut(1) <bar> norm! gv<cr>
snoremap <C-0> <C-g>:<C-u>call <SID>SetFontSize(11) <bar> norm! gv<cr><C-g>
xnoremap <C-0> :<C-u>call <SID>SetFontSize(11) <bar> norm! gv<cr>
snoremap <C-ScrollWheelDown> <C-g>:<C-u>call <SID>ZoomInOut(-1) <bar> norm! gv<cr><C-g>
snoremap <C-ScrollWheelUp> <C-g>:<C-u>call <SID>ZoomInOut(1) <bar> norm! gv<cr><C-g>
xnoremap <C-ScrollWheelDown> :<C-u>call <SID>ZoomInOut(-1) <bar> norm! gv<cr>
xnoremap <C-ScrollWheelUp> :<C-u>call <SID>ZoomInOut(1) <bar> norm! gv<cr>

" Create an undo checkpoint for every &updatetime milliseconds of idle time:
augroup create_undo_checkpoint_when_idling_in_insert_mode
  autocmd!
  autocmd CursorHoldI * call feedkeys("\<c-g>u", 'n')
augroup END

" Create undo checkpoints when writing prose:
inoremap <buffer> . .<c-g>u
inoremap <buffer> , ,<c-g>u
inoremap <buffer> ; ;<c-g>u
inoremap <buffer> : :<c-g>u
inoremap <buffer> ! !<c-g>u
inoremap <buffer> ? ?<c-g>u
inoremap <buffer> <cr> <cr><c-g>u

" Prevent scrolling past EOF:
function! s:PageOrScrollDown(count, type)
  let l:save_pos = getpos('.')
  exec "norm! L"

  " Check if already on last page:
  if line('.') ==# line('$')
    call setpos('.', l:save_pos)
    return
  endif

  " Page down or scroll down:
  call setpos('.', l:save_pos)
  if a:type ==# 'page'
    exec 'norm! ' . a:count . "\<C-f>"
  else
    exec 'norm! ' . a:count . "\<C-e>"
  endif
  let l:save_pos = getpos('.')
  exec "norm! L"

  " If on last page, reposition view so that the bottom line
  " is the bottom of the winview:
  if line('.') ==# line('$')
    exec 'norm! zb'
  endif

  call setpos('.', l:save_pos)
endfunction
inoremap <silent> <PageDown> <C-o>:<C-u>call <SID>PageOrScrollDown(v:count1, 'page')<cr>
inoremap <silent> <ScrollWheelDown> <C-o>:<C-u>call <SID>PageOrScrollDown(3, 'scroll')<cr>
" (TODO: Make this work in select mode)
